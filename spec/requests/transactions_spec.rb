 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do

  before(:all) do
    @item = FactoryBot.create(:item)
    @user = FactoryBot.create(:user)
  end
  before(:each) do
    sign_in @user
  end
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      name: "My Amazing Name",
      item: @item,
      spent: 2300,
      spent_date: Date.today
    }
  }

  let(:invalid_attributes) {
    {
      name: "",
      item: @item,
      spent: 2300,
      spent_date: Date.today
    }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Transaction.create! valid_attributes
      get transactions_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      transaction = Transaction.create! valid_attributes
      get transaction_url(transaction)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_transaction_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      transaction = Transaction.create! valid_attributes
      get edit_transaction_url(transaction)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Transaction" do
        expect {
          post item_transactions_url(@item), params: { transaction: valid_attributes }
        }.to change(Transaction, :count).by(1)
      end

      it "redirects to the created transaction" do
        post item_transactions_url(@item), params: { transaction: valid_attributes }
        expect(response).to redirect_to(@item.category.month)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Transaction" do
        expect {
          post item_transactions_url(@item), params: { transaction: invalid_attributes }
        }.to change(Transaction, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post item_transactions_url(@item), params: { transaction: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        {
          name: "My Amazing",
          item: @item,
          spent: 2300,
          spent_date: Date.today
        }
      }

      it "updates the requested transaction" do
        transaction = Transaction.create! valid_attributes
        patch transaction_url(transaction), params: { transaction: new_attributes }
        transaction.reload
        expect(transaction.name).to eq("My Amazing")
      end

      it "redirects to the transaction" do
        transaction = Transaction.create! valid_attributes
        patch transaction_url(transaction), params: { transaction: new_attributes }
        transaction.reload
        expect(response).to redirect_to(transaction.item.category.month)
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        transaction = Transaction.create! valid_attributes
        patch transaction_url(transaction), params: { transaction: invalid_attributes }
        expect(response.status).to eq(422)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested transaction" do
      transaction = Transaction.create! valid_attributes
      expect {
        delete transaction_url(transaction)
      }.to change(Transaction, :count).by(-1)
    end

    it "redirects to the transactions list" do
      transaction = Transaction.create! valid_attributes
      delete transaction_url(transaction)
      expect(response).to redirect_to(transaction.item.category.month)
    end
  end
end
